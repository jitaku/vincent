// Generated by CoffeeScript 1.10.0
(function() {
  var Buffer, BufferDropHandler, BufferManager, COMContext, COMCursor, COMSelection, DOMSelection, EventEmitter, Highlighter, IMEHint, ManagerDragCapableTrait, Properties, RichBuffer, SearchSession, SelectSession, SelectionHighlight, SharedCallbacks, Trait, ViewPort,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  COMContext = require("../com/context");

  Trait = require("../com/helper/trait");

  COMSelection = require("../com/selection");

  COMCursor = require("../com/cursor");

  DOMSelection = require("./selection");

  ViewPort = require("./viewPort");

  SelectSession = require("./selectSession");

  SelectionHighlight = require("./selectionHighlight");

  Highlighter = require("./highlighter");

  SearchSession = require("./searchSession");

  EventEmitter = (require("../common/events")).EventEmitter;

  IMEHint = require("./imeHint");

  Properties = require("/component/properties");

  SharedCallbacks = require("/component/sharedCallbacks");

  Buffer = (function(superClass) {
    extend(Buffer, superClass);

    Buffer.index = 0;

    Buffer.prototype.type = "Buffer";

    function Buffer(editor, option) {
      this.editor = editor;
      if (option == null) {
        option = {};
      }
      this.id = (Buffer.index++).toString();
      Buffer.__super__.constructor.call(this);
      this.isActive = false;
      this.name = option.name || ("<buffer " + this.id + ">");
      this.properties = new Properties(this);
    }

    Buffer.prototype.focus = function() {
      if (this.isFocusing) {
        return;
      }
      if (!this.isActive) {
        return false;
      }
      this.isFocusing = true;
      return this.emit("focus");
    };

    Buffer.prototype.blur = function() {
      if (!this.isFocusing) {
        return;
      }
      if (!this.isActive) {
        return false;
      }
      this.isFocusing = false;
      return this.emit("blur");
    };

    Buffer.prototype.activate = function() {
      if (this.isActive) {
        return;
      }
      this.isActive = true;
      return this.emit("active");
    };

    Buffer.prototype.deactivate = function() {
      if (!this.isActive) {
        return;
      }
      this.blur();
      this.isActive = false;
      return this.emit("deactive");
    };

    Buffer.prototype.render = function() {
      return false;
    };

    Buffer.prototype.destroy = function() {
      this.emit("destroy");
    };

    return Buffer;

  })(Leaf.Widget);

  RichBuffer = (function(superClass) {
    extend(RichBuffer, superClass);

    RichBuffer.renderConfig = {};

    RichBuffer.setRenderConfig = function(config) {
      var prop, results, value;
      results = [];
      for (prop in config) {
        value = config[prop];
        results.push(this.renderConfig[prop] = value);
      }
      return results;
    };

    RichBuffer.prototype.type = "RichBuffer";

    function RichBuffer(editor, option) {
      var prop, ref1, value;
      this.editor = editor;
      if (option == null) {
        option = {};
      }
      if (this.template == null) {
        this.template = "<div class=\"buffer\" data-class=\"focusState\">\n  <div data-id=\"viewPort\" class=\"com-view-port needsclick\">\n      <div data-id=\"wrapper\" class=\"wrapper\"></div>\n  </div>\n</div>";
      }
      RichBuffer.__super__.constructor.call(this, this.editor, option);
      this.viewPort = new ViewPort(this, this.UI.viewPort);
      this.context = option.context;
      this.cursor = this.context.createCursor({
        name: "master"
      });
      this.selection = new COMSelection(this.context, this.cursor);
      this.selectSession = new SelectSession(this);
      this.selectionHighlight = new SelectionHighlight(this);
      this.nextRenderCallback = SharedCallbacks.create();
      this.dropHandler = new BufferDropHandler(this);
      this.imeHint = new IMEHint(this);
      this.viewPort.listenBy(this, "scroll", (function(_this) {
        return function() {
          return _this.emit("reflow");
        };
      })(this));
      if (this.highlighter == null) {
        this.highlighter = new Highlighter(this);
      }
      this.searchSession = new SearchSession(this);
      if (this.renderContext == null) {
        this.renderContext = this.context.allocateRenderContext();
      }
      this.__defineGetter__("rootElement", (function(_this) {
        return function() {
          return _this.renderContext.rootElement;
        };
      })(this));
      this.renderContext.buffer = this;
      ref1 = RichBuffer.renderConfig;
      for (prop in ref1) {
        value = ref1[prop];
        this.renderContext.renderConfig[prop] = value;
      }
      this.renderContext.listenBy(this, "resize", (function(_this) {
        return function() {
          return _this.emit("resize");
        };
      })(this));
      this.interactive = false;
      this.lockUserInput = false;
      this.node.addEventListener("click", (function(_this) {
        return function() {
          return _this.ensureFocus();
        };
      })(this));
      this.node.addEventListener("touchend", (function(_this) {
        return function() {
          return _this.ensureFocus();
        };
      })(this));
      this.renderContext.buffer = this;
      this.renderContext.cursor = this.cursor;
      this.__defineGetter__("interactive", (function(_this) {
        return function() {
          return _this.renderContext.interactive;
        };
      })(this));
      this.__defineSetter__("interactive", (function(_this) {
        return function(value) {
          _this.renderContext.interactive = value;
          return _this.emit("interactiveChange", value);
        };
      })(this));
      this.__defineGetter__("renderOption", (function(_this) {
        return function(value) {
          return _this.renderContext.renderConfig;
        };
      })(this));
      this.viewPort.init();
    }

    RichBuffer.prototype.activate = function() {
      return RichBuffer.__super__.activate.call(this);
    };

    RichBuffer.prototype.deactivate = function() {
      return RichBuffer.__super__.deactivate.call(this);
    };

    RichBuffer.prototype.ensureFocus = function() {
      if (this.lockUserInput) {
        return;
      }
      return this.editor.bufferManager.focusAt(this);
    };

    RichBuffer.prototype.ensureRenderContext = function() {
      if (this.context.currentRenderContext !== this.renderContext) {
        return this.context.setRenderContext(this.renderContext);
      }
    };

    RichBuffer.prototype.focus = function() {
      RichBuffer.__super__.focus.call(this);
      this.selectSession.activate();
      return this.VM.focusState = "buffer-focus";
    };

    RichBuffer.prototype.blur = function() {
      RichBuffer.__super__.blur.call(this);
      this.selectSession.deactivate();
      return this.VM.focusState = "buffer-blur";
    };

    RichBuffer.prototype.nextRender = function(callback) {
      return this.nextRenderCallback.push(callback);
    };

    RichBuffer.prototype.render = function() {
      this.context.render(this.renderContext);
      if (this.name === "debug") {
        Logger.debug("render debug", this);
      }
      this.viewPort.setRoot(this.renderContext.el);
      this.selectionHighlight.render();
      return this.nextRenderCallback();
    };

    RichBuffer.prototype.setContentString = function(contentString) {
      this.context.transact((function(_this) {
        return function() {
          var p;
          _this.context.root.empty();
          p = _this.context.createElement("Contents", {
            children: [
              (_this.context.createElement("RichText", {
                contentString: contentString
              })).toJSON()
            ]
          });
          _this.context.root.append(p);
          _this.cursor.pointAt(p.children[0]);
          return _this.context.history.fromNow();
        };
      })(this));
      return true;
    };

    RichBuffer.prototype.markAsReadonly = function() {
      this.emit("readonly");
      return this.context.isReadonly = true;
    };

    RichBuffer.prototype.unmarkAsReadonly = function() {
      this.emit("readwrite");
      return this.context.isReadonly = false;
    };

    RichBuffer.prototype.destroy = function() {
      var ref1;
      if ((ref1 = this.context) != null) {
        ref1.destroyRenderContext(this.renderContext);
      }
      this.selectionHighlight.destroy();
      return RichBuffer.__super__.destroy.call(this);
    };

    return RichBuffer;

  })(Buffer);

  BufferManager = (function(superClass) {
    extend(BufferManager, superClass);

    function BufferManager(editor) {
      this.editor = editor;
      BufferManager.__super__.constructor.call(this);
      this.buffers = [];
      this.focusStack = [];
      new ManagerDragCapableTrait(this);
    }

    BufferManager.prototype.render = function() {
      var SLOW_RENDER, buffer, endRender, i, len, ref1, ref2, start;
      SLOW_RENDER = 10;
      start = Date.now();
      ref1 = this.buffers;
      for (i = 0, len = ref1.length; i < len; i++) {
        buffer = ref1[i];
        if (!buffer.isActive || !buffer.interactive) {
          continue;
        }
        buffer.render();
        buffer.emit("afterRender");
        if (buffer.isFocusing) {
          buffer.selectSession.syncSelection();
        }
      }
      if ((ref2 = this.currentFocus) != null) {
        ref2.ensureRenderContext();
      }
      endRender = Date.now();
      if (endRender - start > SLOW_RENDER) {
        return Logger.debug("SLOW_RENDER", endRender - start, "ms", ">", SLOW_RENDER, "ms");
      }
    };

    BufferManager.prototype.allocate = function(context, option) {
      var buffer;
      if (option == null) {
        option = {};
      }
      if (context instanceof Buffer) {
        buffer = context;
      } else {
        option.context = context;
        buffer = new RichBuffer(this.editor, option);
      }
      buffer.manager = this;
      this.buffers.push(buffer);
      buffer.listenBy(this, "active", (function(_this) {
        return function() {
          return _this.emit("active", buffer);
        };
      })(this));
      buffer.listenBy(this, "deactive", (function(_this) {
        return function() {
          return _this.emit("deactive", buffer);
        };
      })(this));
      return buffer;
    };

    BufferManager.prototype.recover = function(buffer) {
      buffer.stopListenBy(this);
      return buffer.destroy();
    };

    BufferManager.prototype.focusAt = function(buffer) {
      if (this.currentFocus) {
        this.currentFocus.blur();
      }
      this.currentFocus = buffer;
      buffer.ensureRenderContext();
      buffer.focus();
      if (!buffer.isActive) {
        Logger.warn("Focus at none active buffer doesn't make sense.", buffer);
      }
      return this.emit("focus", buffer);
    };

    BufferManager.prototype.pushFocus = function(buffer) {
      if (this.currentFocus) {
        this.focusStack.push(this.currentFocus);
      }
      return this.focusAt(buffer);
    };

    BufferManager.prototype.popFocus = function(buffer) {
      if (this.currentFocus === buffer) {
        if (this.focusStack.length > 0) {
          return this.focusAt(this.focusStack.pop());
        }
      } else {
        return this.focusStack = this.focusStack.filter(function(item) {
          return item === buffer;
        });
      }
    };

    return BufferManager;

  })(EventEmitter);

  ManagerDragCapableTrait = (function(superClass) {
    extend(ManagerDragCapableTrait, superClass);

    function ManagerDragCapableTrait() {
      return ManagerDragCapableTrait.__super__.constructor.apply(this, arguments);
    }

    ManagerDragCapableTrait.prototype.initialize = function() {
      return this.registerDropHandler((function(_this) {
        return function(e, buffer) {
          var i, len, protocol, ref1, results;
          ref1 = e.detail.protocols;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            protocol = ref1[i];
            if (protocol.type === "Rune") {
              _this.transferRune(buffer, protocol.data);
              e.preventDefault();
              results.push(e.stopImmediatePropagation());
            } else {
              results.push(void 0);
            }
          }
          return results;
        };
      })(this));
    };

    ManagerDragCapableTrait.prototype.transferRune = function(buffer, origin) {
      var ref, ref1;
      if (buffer.cursor.target.mime !== "text/com-rich-text") {
        return false;
      }
      if (origin.context !== buffer.context) {
        ref = buffer.context.createElement(origin.type, origin.toJSON());
      } else {
        ref = origin;
      }
      if (origin === buffer.cursor.target.runeAtIndex(buffer.cursor.anchor.index)) {
        return true;
      }
      origin.context.transact((function(_this) {
        return function() {
          if (origin.parent) {
            origin.parent.reflow();
            return origin.parent.removeText(origin.startOffset, origin.length);
          }
        };
      })(this));
      buffer.context.transact((function(_this) {
        return function() {
          buffer.cursor.conduct("write", ref);
          return ref.dirty = true;
        };
      })(this));
      return (ref1 = buffer.viewPort.controller) != null ? ref1.reform() : void 0;
    };

    ManagerDragCapableTrait.prototype.registerDropHandler = function(handler) {
      if (handler == null) {
        handler = function() {};
      }
      if (this.dropHandlers == null) {
        this.dropHandlers = [];
      }
      return this.dropHandlers.push(handler);
    };

    return ManagerDragCapableTrait;

  })(Trait);

  BufferDropHandler = (function() {
    function BufferDropHandler(buffer1) {
      this.buffer = buffer1;
      this.editor = this.buffer.editor;
      this.viewPort = this.buffer.viewPort;
      this.viewPort.el.addEventListener("user-drop", (function(_this) {
        return function(e) {
          var handler, i, j, len, len1, ref1, ref2;
          ref1 = _this.dropHandlers || [];
          for (i = 0, len = ref1.length; i < len; i++) {
            handler = ref1[i];
            handler(e);
            if (e.defaultPrevented) {
              return;
            }
          }
          ref2 = _this.editor.bufferManager.dropHandlers;
          for (j = 0, len1 = ref2.length; j < len1; j++) {
            handler = ref2[j];
            handler(e, _this.buffer);
            if (e.defaultPrevented) {
              return;
            }
          }
        };
      })(this));
    }

    BufferDropHandler.prototype.registerDropHandler = function(handler) {
      if (handler == null) {
        handler = function() {};
      }
      if (this.dropHandlers == null) {
        this.dropHandlers = [];
      }
      return this.dropHandlers.push(handler);
    };

    return BufferDropHandler;

  })();

  Buffer.RichBuffer = RichBuffer;

  Buffer.BufferManager = BufferManager;

  module.exports = Buffer;

}).call(this);
