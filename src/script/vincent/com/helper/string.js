// Generated by CoffeeScript 1.10.0
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  module.exports = {
    ignorePhaseTypes: [],
    ignoreChar: [" "],
    findJumpBreakForward: function(string, index) {
      return this.findJumpBreak(string, index, 1, 0);
    },
    findJumpBreakBackward: function(string, index) {
      return this.findJumpBreak(string, index, -1, -1);
    },
    findJumpBreak: function(string, index, step, fix) {
      var char, phase, phase2Type, regret, type;
      phase = 0;
      type = null;
      index += fix;
      phase2Type = null;
      if (step < 0) {
        regret = 1;
      } else {
        regret = 0;
      }
      while (index < string.length && index >= 0) {
        char = string[index];
        type = this.detectCharType(char);
        if (phase === 0) {
          if (indexOf.call(this.ignorePhaseTypes, type) >= 0 || indexOf.call(this.ignoreChar, char) >= 0) {
            index += step;
            continue;
          } else {
            phase = 1;
          }
        }
        if (phase === 1) {
          if (type === phase2Type || !phase2Type) {
            index += step;
            phase2Type = type;
            continue;
          }
          index += regret;
          break;
        }
      }
      if (index < 0) {
        return 0;
      }
      if (index > string.length) {
        return string.length;
      }
      return index;
    },
    detectCharType: function(char) {
      if (/\s/.test(char)) {
        return "space";
      } else if (/[`\*~\s\.";\[\]\{\}:<>,\\\/\?`~!@#\$%\^&\(\)\|\u3002\uff1b\uff0c\uff1a\u201c\u201d\uff08\uff09\u3001\uff1f\u300a\u300b]/.test(char)) {
        return "delimeter";
      } else if (/[a-z_]/i.test(char)) {
        return "alphabet";
      } else if (/[\u4e00-\u9fa5]/.test(char)) {
        return "chinese";
      } else {
        return "other";
      }
    }
  };

}).call(this);
